import streamlit as st
import os
from gemini_utility import (load_gemini_pro_model, gemini_pro_vision_response, embedding_model_response, gemini_pro_response)
from streamlit_option_menu import option_menu
from PIL import Image

# Get the current working directory
working_directory = os.path.dirname(os.path.abspath(__file__))

# Set up the page configuration
st.set_page_config(
    page_title="Gemini AI",
    page_icon="Us.png",
    layout="centered"
)

# Sidebar with options
with st.sidebar:
    selected = option_menu(
        menu_title="Gemini AI",
        options=["Chatbot (with history)", "Image Captioning", "Embed Text", "Ask me anything"],
        menu_icon="robot", icons=["chat-heart", "image-fill", "textarea-t", "person-raised-hand"], default_index=0
    )

# Function to translate role between Gemini Pro and Streamlit terminology
def translate_role_streamlit(user_role):
    if user_role == "model":
        return "assistant"
    else:
        return user_role

# Load the Gemini Pro model when "Chatbot" is selected
if selected == "Chatbot (with history)":
    model = load_gemini_pro_model()

    # Initialize chat session in Streamlit
    if "chat_session" not in st.session_state:
        st.session_state.chat_session = model.start_chat(history=[])

    # Title for Streamlit page
    st.title("Genius BOT")

    # Display the chat history
    for message in st.session_state.chat_session.history:
        with st.chat_message(translate_role_streamlit(message.role)):
            st.markdown(message.parts[0].text)

    # Input field for user's message
    user_prompt = st.chat_input("Ask Udita anything! She's a genius after all ...")

    if user_prompt:
        st.chat_message("user").markdown(user_prompt)

        gemini_response = st.session_state.chat_session.send_message(user_prompt)

        # Display Gemini response on the Streamlit page
        with st.chat_message("assistant"):
            st.markdown(gemini_response.text)

# IMAGE CAPTIONING PAGE

if selected == "Image Captioning":

    st.title("ðŸ“·Snap Narrate")

    uploaded_image = st.file_uploader("Upload an image :", type= ["jpg","jpeg","png"])

    if uploaded_image is not None:
        image = Image.open(uploaded_image)

        col1, col2 = st.columns(2)

        with col1:
            resized_image = image.resize((800, 500))  # Resize image for better display
            st.image(resized_image, caption="Uploaded Image")  # Add caption here for uploaded image
        
        default_prompt = "Write a short caption for this image"

        # Getting the response from gemini-pro-vision model 
        caption = gemini_pro_vision_response(default_prompt, image)

        with col2:
            st.info(caption)  # Display caption generated by the model

# TEXT EMBEDDING PAGE

if selected == "Embed Text":
    st.title("Embed Text")

    # Input text box to get the text for embedding
    input_text = st.text_area(label="", placeholder="Enter the Text to get the embeddings: ")

    if input_text:  # Check if input_text is not empty
        if st.button("Get Embeddings"):
            # Get the embedding response
            response = embedding_model_response(input_text)
            st.markdown(response)


# ASK ME ANYTHING

if selected ==  "Ask me anything":
    st.title("Ask me anything")

    # text box to enter prompt
    user_prompt = st.text_area(label = "",placeholder="Ask Gemini...")

    if st.button("Get an answer"):
        response = gemini_pro_response(user_prompt)
        st.markdown(response)
